{"version":3,"sources":["components/Formulario.js","components/Cancion.js","components/Artista.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","props","useState","artista","cancion","busqueda","setBusqueda","error","setError","actualizarState","e","target","name","value","onSubmit","preventDefault","trim","setBusquedaLetra","className","type","placeholder","onChange","autoFocus","Cancion","letra","length","Artista","Object","keys","banda","strArtist","src","strArtistThumb","alt","strBiographyEN","App","busquedaLetra","setLetra","setBanda","useEffect","consultarApiLetra","a","url","axios","resultado","data","lyrics","consultarApiBanda","artists","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2UA0EeA,MAxEf,SAAoBC,GAAQ,IAAD,EACSC,mBAAS,CACrCC,QAAQ,GACRC,QAAQ,KAHW,mBAChBC,EADgB,KACNC,EADM,OAKEJ,oBAAS,GALX,mBAKhBK,EALgB,KAKTC,EALS,KASjBC,EAAkB,SAACC,GACrBJ,EAAY,2BACLD,GADI,kBAENK,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,UAsBjC,OACI,0BAAMC,SAlBW,SAACJ,GAClBA,EAAEK,iBAE6B,KAA5BV,EAASF,QAAQa,QAA4C,KAA3BX,EAASD,QAAQY,QAItDR,GAAS,GAETP,EAAMgB,iBAAiBZ,GAEvBC,EAAY,CACRH,QAAQ,GACRC,QAAQ,MATRI,GAAS,KAgBT,kCACI,yDAGID,GAAS,uBAAGW,UAAU,SAAb,6BAGb,yBAAKA,UAAU,oBACZ,0CACA,2BAAOC,KAAK,OACTC,YAAY,iBACZP,MAAOR,EAASF,QAChBS,KAAK,UACLS,SAAUZ,EACVa,WAAS,KAGf,yBAAKJ,UAAU,oBACZ,0CACA,2BAAOC,KAAK,OACTC,YAAY,iBACZP,MAAOR,EAASD,QAChBQ,KAAK,UACLS,SAAUZ,IAEb,4BAAQU,KAAK,UAAb,c,gBC9CJI,MAhBf,SAAiBtB,GAEb,OAA0B,IAAvBA,EAAMuB,MAAMC,OAAqB,KAGhC,kBAAC,WAAD,KACQ,sDACA,yBAAKP,UAAU,UACZ,2BAAIjB,EAAMuB,UCWdE,MAnBf,SAAiBzB,GACb,OAEI,kBAAC,WAAD,KAGQ0B,OAAOC,KAAK3B,EAAM4B,OAAOJ,QAAU,GAEhC,6BACD,4BAAKxB,EAAM4B,MAAMC,WACjB,yBAAKC,IAAK9B,EAAM4B,MAAMG,eAAgBC,IAAI,KAC3C,yCACA,2BAAIhC,EAAM4B,MAAMK,mBC2DlBC,MAlEf,WAAgB,IAAD,EAC6BjC,mBAAS,IADtC,mBACNkC,EADM,KACSnB,EADT,OAEaf,mBAAS,IAFtB,mBAENsB,EAFM,KAECa,EAFD,OAGanC,mBAAS,IAHtB,mBAGN2B,EAHM,KAGCS,EAHD,KA0Cb,OArCAC,qBAAW,WAGT,GAAyC,IAAtCZ,OAAOC,KAAKQ,GAAeX,OAA9B,CAGA,IAAMe,EAAiB,uCAAG,8BAAAC,EAAA,6DAChBC,EADgB,oCACmBN,EAAcjC,QADjC,YAC4CiC,EAAchC,SAD1D,SAEEuC,IAAOD,GAFT,OAEhBE,EAFgB,OAIxB,IACEP,EAASO,EAAUC,KAAKC,QAEzB,SACCT,EAAS,KARa,2CAAH,qDAajBU,EAAiB,uCAAG,8BAAAN,EAAA,6DAClBC,EADkB,gEAC6CN,EAAcjC,SAD3D,SAEAwC,IAAMD,GAFN,OAElBE,EAFkB,OAGxB,IACEN,EAASM,EAAUC,KAAKG,QAAQ,IAElC,SACEV,EAAS,GAPa,2CAAH,qDAWvBE,IACAO,OACC,CAACX,EAAcP,IAMhB,yBAAKX,UAAU,cACb,yBAAKA,UAAU,yBACb,kBAAC,EAAD,CACID,iBAAkBA,KAIxB,yBAAKC,UAAU,yBACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,CACEM,MAAOA,KAGX,yBAAKN,UAAU,sBACb,kBAAC,EAAD,CACEW,MAAOA,QCrDCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1D,GACL2D,QAAQ3D,MAAMA,EAAM4D,c","file":"static/js/main.dafd74e2.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nfunction Formulario(props) {\r\n    const [busqueda, setBusqueda] = useState({\r\n        artista:'',\r\n        cancion:''\r\n    });\r\n    const [error, setError] =useState(false);\r\n\r\n\r\n    // funcion a cada input para leer su contenido\r\n    const actualizarState = (e) => {\r\n        setBusqueda({\r\n            ...busqueda,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    \r\n    const handlerClick = (e) => {\r\n        e.preventDefault();\r\n        // validacion\r\n        if(busqueda.artista.trim() === '' || busqueda.cancion.trim()=== ''){\r\n            setError(true)\r\n            return\r\n        }\r\n        setError(false);\r\n\r\n        props.setBusquedaLetra(busqueda)\r\n\r\n        setBusqueda({\r\n            artista:'',\r\n            cancion:''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handlerClick}>\r\n\r\n            <fieldset>\r\n                <h1>Buscador Letras Canciones</h1>\r\n\r\n                {\r\n                    error && <p className=\"error\">Error! Revisar los Campos</p> \r\n                }\r\n\r\n                <div className=\"input-contenedor\">\r\n                   <label>Artista</label>\r\n                   <input type=\"text\" \r\n                      placeholder=\"Nombre Artista\" \r\n                      value={busqueda.artista} \r\n                      name=\"artista\" \r\n                      onChange={actualizarState} \r\n                      autoFocus\r\n                    />\r\n                </div>           \r\n                <div className=\"input-contenedor\">\r\n                   <label>Cancion</label>\r\n                   <input type=\"text\"\r\n                      placeholder=\"Nombre Cancion\" \r\n                      value={busqueda.cancion} \r\n                      name=\"cancion\" \r\n                      onChange={actualizarState}\r\n                    />\r\n                   <button type=\"submit\">Buscar</button>\r\n                </div>\r\n          \r\n                \r\n\r\n            </fieldset>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Formulario;\r\n","import React, { Fragment } from 'react'\r\n\r\nfunction Cancion(props) {\r\n  // para que hasta que no hayya una peticion no se muestre el titulo\r\n    if(props.letra.length === 0) return null;\r\n\r\n    return (\r\n        <Fragment>\r\n                <h2>Letra de la Canci√≥n</h2>\r\n                <div className=\"cont-p\">\r\n                   <p>{props.letra}</p>\r\n                </div>\r\n             \r\n                \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Cancion\r\n","import React, {Fragment} from 'react'\r\n\r\nfunction Artista(props) {\r\n    return (\r\n\r\n        <Fragment>\r\n             {/*  para que hasta que no hayya una peticion no se muestre el titulo  */}\r\n            {\r\n                Object.keys(props.banda).length >= 1 &&\r\n                  \r\n                  (<div>\r\n                  <h2>{props.banda.strArtist}</h2>\r\n                  <img src={props.banda.strArtistThumb} alt=\"\"/>\r\n                 <h3>Biografia</h3>\r\n                 <p>{props.banda.strBiographyEN}</p>\r\n              </div>)\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Artista\r\n","import React, { useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport axios from 'axios';\nimport Cancion from './components/Cancion';\nimport Artista from './components/Artista';\n\n\nfunction App() {\n  const [busquedaLetra, setBusquedaLetra] = useState({});\n  const [letra, setLetra] = useState('');\n  const [banda, setBanda] = useState({});\n\n  useEffect( () => {\n    // la 1era vez \"busquedaLetra\" va estar vacio, entonces return porque no queremos haer nada\n    // es una buena forma de revisar si un objeto esta vacio\n    if(Object.keys(busquedaLetra).length === 0) return;\n    // ni puta idea porque puso asi el return\n\n    const consultarApiLetra = async() =>{\n        const url = `https://api.lyrics.ovh/v1/${busquedaLetra.artista}/${busquedaLetra.cancion}`;\n        const resultado = await axios (url)\n\n      try{ \n        setLetra(resultado.data.lyrics);\n         \n      }catch{\n        setLetra('0')\n      }\n    }\n    \n    \n    const consultarApiBanda = async() =>{\n      const url = `https://www.theaudiodb.com/api/v1/json/1/search.php?s=${busquedaLetra.artista}`\n      const resultado = await axios(url)\n      try{\n        setBanda(resultado.data.artists[0])\n      }\n      catch{\n        setBanda(0)\n      }\n    }\n \n    consultarApiLetra();\n    consultarApiBanda();   \n  }, [busquedaLetra,banda]);\n \n\n\n\n  return (\n    <div className=\"contenedor\">\n      <div className=\"contenedor-formulario\">\n        <Formulario \n            setBusquedaLetra={setBusquedaLetra}\n        />\n      </div>\n      \n      <div className=\"contenedor-resultados\">\n        <div className=\"contenedor-cancion\">\n          <Cancion\n            letra={letra}\n          />\n        </div>\n        <div className=\"contenedor-artista\">\n          <Artista\n            banda={banda}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}